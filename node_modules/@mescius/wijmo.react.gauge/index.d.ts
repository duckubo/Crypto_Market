/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.gauge}
 * Contains React components for the <b>wijmo.gauge</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { ControlBaseEvents, ControlBaseInputs, WjRef, BaseInputs } from '@mescius/wijmo.react.base';
import * as React from 'react';
import * as wjcCore from '@mescius/wijmo';
import * as wjcGauge from '@mescius/wijmo.gauge';
export declare type GaugeBaseInputs = ControlBaseInputs & {
    face?: Partial<wjcGauge.Range>;
    format?: string;
    getText?: wjcGauge.IGetGaugeText;
    handleWheel?: boolean;
    hasShadow?: boolean;
    isAnimated?: boolean;
    isReadOnly?: boolean;
    max?: number;
    min?: number;
    origin?: number;
    pointer?: Partial<wjcGauge.Range>;
    ranges?: any[];
    showRanges?: boolean;
    showText?: wjcGauge.ShowText | string;
    showTickText?: boolean;
    showTicks?: boolean;
    stackRanges?: boolean;
    step?: number;
    thickness?: number;
    thumbSize?: number;
    tickSpacing?: number;
    value?: number;
};
export declare type GaugeBaseEvents<T> = ControlBaseEvents<T> & {
    valueChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const GaugeBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type LinearGaugeInputs = GaugeBaseInputs & {
    direction?: wjcGauge.GaugeDirection | string;
    faceBounds?: wjcCore.Rect;
};
export declare type LinearGaugeEvents<T> = GaugeBaseEvents<T> & {};
export declare const LinearGaugeMeta: {
    inputs: string[];
    events: string[];
};
export declare type LinearGaugeProps = LinearGaugeInputs & LinearGaugeEvents<wjcGauge.LinearGauge>;
export declare type LinearGaugeRef = WjRef<wjcGauge.LinearGauge>;
/**
 * React component for the {@link wijmo.gauge.LinearGauge} control.
 *
 * The <b>linear-gauge</b> component may contain
 * a {@link wijmo.react.gauge.Range} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.gauge.LinearGauge} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 *
 * The example below shows how to instantiate and initialize a
 * {@link wijmo.gauge.LinearGauge} control in JSX:
 *
 * <pre>&lt;Wj.LinearGauge
 *   min={ 0 } max={ 1000 } step={ 50 } isReadOnly={ false }
 *   value={ this.state.view.currentItem.sales }
 *   valueChanged={ this.salesChanged }
 *   format="c0" thumbSize={ 20 } showRanges={ false }
 *   face={&#8203;{ thickness:0.5 }}
 *   pointer={&#8203;{ thickness:0.5 }}
 *   ranges={[
 *       { min: 0, max: 333, color: 'red' },
 *       { min: 333, max: 666, color: 'gold' },
 *       { min: 666, max: 1000, color: 'green' }
 *   ]} /&gt;</pre>
 *
 * The code <b>min</b>, <b>max</b>, <b>step</b>, and <b>isReadOnly</b> properties
 * to define the range of the gauge and to allow users to edit its value.
 * Next, it sets the <b>value</b> and <b>valueChanged</b> properties to create
 * a two-way binding for the gauge's value.
 *
 * Then it sets the <b>format</b>, <b>thumbSize</b>, and <b>showRanges</b>
 * properties to define the appearance of the gauge. Finally, the markup sets
 * the thickness of the <b>face</b> and <b>pointer</b> ranges, and extra ranges
 * that will control the color of the <b>value</b> range depending on the gauge's
 * current value.
 */
export declare const LinearGauge: React.ForwardRefExoticComponent<LinearGaugeProps>;
export declare type BulletGraphInputs = LinearGaugeInputs & {
    bad?: number;
    good?: number;
    target?: number;
};
export declare type BulletGraphEvents<T> = LinearGaugeEvents<T> & {};
export declare const BulletGraphMeta: {
    inputs: string[];
    events: string[];
};
export declare type BulletGraphProps = BulletGraphInputs & BulletGraphEvents<wjcGauge.BulletGraph>;
export declare type BulletGraphRef = WjRef<wjcGauge.BulletGraph>;
/**
 * React component for the {@link wijmo.gauge.BulletGraph} control.
 *
 * The <b>bullet-graph</b> component may contain
 * a {@link wijmo.react.gauge.Range} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.gauge.BulletGraph} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 *
 * The example below shows how to instantiate and initialize a
 * {@link wijmo.gauge.BulletGraph} control in JSX:
 *
 * <pre>&lt;Wj.BulletGraph
 *   min={ 0 } max={ 1000 } step={ 50 } isReadOnly={ false }
 *   value={ this.state.view.currentItem.sales }
 *   valueChanged={ this.salesChanged }
 *   format="c0" thumbSize={ 20 } showRanges={ false }
 *   face={&#8203;{ thickness:0.5 }}
 *   pointer={&#8203;{ thickness:0.5 }}
 *   ranges={[
 *       { min: 0, max: 333, color: 'red' },
 *       { min: 333, max: 666, color: 'gold' },
 *       { min: 666, max: 1000, color: 'green' }
 *   ]} /&gt;</pre>
 *
 * The code <b>min</b>, <b>max</b>, <b>step</b>, and <b>isReadOnly</b> properties
 * to define the range of the gauge and to allow users to edit its value.
 * Next, it sets the <b>value</b> and <b>valueChanged</b> properties to create
 * a two-way binding for the gauge's value.
 *
 * Then it sets the <b>format</b>, <b>thumbSize</b>, and <b>showRanges</b>
 * properties to define the appearance of the gauge. Finally, the markup sets
 * the thickness of the <b>face</b> and <b>pointer</b> ranges, and extra ranges
 * that will control the color of the <b>value</b> range depending on the gauge's
 * current value.
 */
export declare const BulletGraph: React.ForwardRefExoticComponent<BulletGraphProps>;
export declare type RadialGaugeInputs = GaugeBaseInputs & {
    autoScale?: boolean;
    faceBounds?: wjcCore.Rect;
    needleElement?: any;
    needleLength?: wjcGauge.NeedleLength | string;
    needleShape?: wjcGauge.NeedleShape | string;
    startAngle?: number;
    sweepAngle?: number;
};
export declare type RadialGaugeEvents<T> = GaugeBaseEvents<T> & {};
export declare const RadialGaugeMeta: {
    inputs: string[];
    events: string[];
};
export declare type RadialGaugeProps = RadialGaugeInputs & RadialGaugeEvents<wjcGauge.RadialGauge>;
export declare type RadialGaugeRef = WjRef<wjcGauge.RadialGauge>;
/**
 * React component for the {@link wijmo.gauge.RadialGauge} control.
 *
 * The <b>radial-gauge</b> component may contain
 * a {@link wijmo.react.gauge.Range} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.gauge.RadialGauge} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 *
 * The example below shows how to instantiate and initialize a
 * {@link wijmo.gauge.RadialGauge} control in JSX:
 *
 * <pre>&lt;Wj.RadialGauge
 *   min={ 0 } max={ 1000 } step={ 50 } isReadOnly={ false }
 *   value={ this.state.view.currentItem.sales }
 *   valueChanged={ this.salesChanged }
 *   format="c0" thumbSize={ 20 } showRanges={ false }
 *   face={&#8203;{ thickness:0.5 }}
 *   pointer={&#8203;{ thickness:0.5 }}
 *   ranges={[
 *       { min: 0, max: 333, color: 'red' },
 *       { min: 333, max: 666, color: 'gold' },
 *       { min: 666, max: 1000, color: 'green' }
 *   ]} /&gt;</pre>
 *
 * The code <b>min</b>, <b>max</b>, <b>step</b>, and <b>isReadOnly</b> properties
 * to define the range of the gauge and to allow users to edit its value.
 * Next, it sets the <b>value</b> and <b>valueChanged</b> properties to create
 * a two-way binding for the gauge's value.
 *
 * Then it sets the <b>format</b>, <b>thumbSize</b>, and <b>showRanges</b>
 * properties to define the appearance of the gauge. Finally, the markup sets
 * the thickness of the <b>face</b> and <b>pointer</b> ranges, and extra ranges
 * that will control the color of the <b>value</b> range depending on the gauge's
 * current value.
 */
export declare const RadialGauge: React.ForwardRefExoticComponent<RadialGaugeProps>;
export declare type RangeInputs = BaseInputs & {
    color?: string;
    max?: number;
    min?: number;
    name?: string;
    thickness?: number;
    wjProperty?: string;
};
export declare type RangeEvents<T> = {
    propertyChanged?: wjcCore.IEventHandler<T, wjcCore.PropertyChangedEventArgs>;
};
export declare const RangeMeta: {
    inputs: string[];
    events: string[];
};
export declare type RangeProps = RangeInputs & RangeEvents<wjcGauge.Range>;
export declare type RangeRef = WjRef<wjcGauge.Range>;
/**
 * React component for the {@link wijmo.gauge.Range} class.
 *
 * The <b>range</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.gauge.LinearGauge}
 * , {@link wijmo.react.gauge.BulletGraph}
 *  or {@link wijmo.react.gauge.RadialGauge}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.gauge.Range} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const Range: React.ForwardRefExoticComponent<RangeProps>;
