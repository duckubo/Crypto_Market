/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.chart}
 * Contains React components for the <b>wijmo.chart</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { ControlBaseEvents, ControlBaseInputs, WjRef, BaseInputs } from '@mescius/wijmo.react.base';
import * as React from 'react';
import * as wjcCore from '@mescius/wijmo';
import * as wjcChart from '@mescius/wijmo.chart';
export declare type FlexChartBaseInputs = ControlBaseInputs & {
    footer?: string;
    footerStyle?: any;
    header?: string;
    headerStyle?: any;
    itemFormatter?: Function;
    itemsSource?: any[] | wjcCore.ICollectionView;
    legend?: Partial<wjcChart.Legend>;
    options?: any;
    palette?: string[];
    plotMargin?: any;
    selectionMode?: wjcChart.SelectionMode | string;
};
export declare type FlexChartBaseEvents<T> = ControlBaseEvents<T> & {
    itemsSourceChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    itemsSourceChanging?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    rendered?: wjcCore.IEventHandler<T, wjcChart.RenderEventArgs>;
    rendering?: wjcCore.IEventHandler<T, wjcChart.RenderEventArgs>;
    selectionChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const FlexChartBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartCoreInputs = FlexChartBaseInputs & {
    axes?: any[];
    axisX?: Partial<wjcChart.Axis>;
    axisY?: Partial<wjcChart.Axis>;
    binding?: string;
    bindingX?: string;
    dataLabel?: wjcChart.DataLabel;
    interpolateNulls?: boolean;
    legendToggle?: boolean;
    plotAreas?: any[];
    renderEngine?: wjcChart.IRenderEngine;
    selection?: wjcChart.SeriesBase;
    series?: any[];
    symbolSize?: number;
    tooltip?: Partial<wjcChart.ChartTooltip>;
};
export declare type FlexChartCoreEvents<T> = FlexChartBaseEvents<T> & {
    seriesVisibilityChanged?: wjcCore.IEventHandler<T, wjcChart.SeriesEventArgs>;
};
export declare const FlexChartCoreMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartInputs = FlexChartCoreInputs & {
    chartType?: wjcChart.ChartType | string;
    rotated?: boolean;
    stacking?: wjcChart.Stacking | string;
    tooltipContent?: any;
    labelContent?: any;
};
export declare type FlexChartEvents<T> = FlexChartCoreEvents<T> & {};
export declare const FlexChartMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartProps = FlexChartInputs & FlexChartEvents<wjcChart.FlexChart>;
export declare type FlexChartRef = WjRef<wjcChart.FlexChart>;
/**
 * React component for the {@link wijmo.chart.FlexChart} control.
 *
 * The <b>flex-chart</b> component may contain
 * the following child components:
 * {@link wijmo.react.chart.analytics.FlexChartTrendLine}
 * , {@link wijmo.react.chart.analytics.FlexChartMovingAverage}
 * , {@link wijmo.react.chart.analytics.FlexChartYFunctionSeries}
 * , {@link wijmo.react.chart.analytics.FlexChartParametricFunctionSeries}
 * , {@link wijmo.react.chart.analytics.FlexChartWaterfall}
 * , {@link wijmo.react.chart.analytics.FlexChartBoxWhisker}
 * , {@link wijmo.react.chart.analytics.FlexChartErrorBar}
 * , {@link wijmo.react.chart.analytics.FlexChartBreakEven}
 * , {@link wijmo.react.chart.animation.FlexChartAnimation}
 * , {@link wijmo.react.chart.annotation.FlexChartAnnotationLayer}
 * , {@link wijmo.react.chart.interaction.FlexChartRangeSelector}
 * , {@link wijmo.react.chart.interaction.FlexChartGestures}
 * , {@link wijmo.react.chart.FlexChartAxis}
 * , {@link wijmo.react.chart.FlexChartLegend}
 * , {@link wijmo.react.chart.FlexChartDataLabel}
 * , {@link wijmo.react.chart.FlexChartSeries}
 * , {@link wijmo.react.chart.FlexChartLineMarker}
 * and {@link wijmo.react.chart.FlexChartPlotArea}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.FlexChart} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 *
 * The example below shows how to instantiate and initialize a
 * {@link wijmo.chart.FlexChart} control in JSX:
 *
 * <pre>&lt;Wj.FlexChart
 *   itemsSource={ this.state.data }
 *   bindingX="name"
 *   header={ this.state.header }
 *   footer={ this.state.footer }
 *   axisX={&#8203;{ title: this.state.titleX }}
 *   axisY={&#8203;{ title: this.state.titleY }}
 *   legend={&#8203;{ position: this.state.legendPosition }}
 *   series={[
 *       { name: 'Sales', binding: 'sales' },
 *       { name: 'Expenses', binding: 'expenses' },
 *       { name: 'Downloads', binding: 'downloads', chartType: 'LineSymbols' }
 *   ]} /&gt;</pre>
 *

  * The code sets the <b>itemsSource</b> property to a collection that contains
  * the data to chart and the <b>bindingX</b> property to specify the name of the
  * data property to use for the chart's X values.
  *
  * It sets the <b>header</b> and <b>footer</b> properties to specify the
  * chart titles, and customizes the chart's axes and legend.
  *
  * Finally, it sets the <b>series</b> property to an array that specifies the
  * data items that the chart should display.
  */
export declare const FlexChart: React.ForwardRefExoticComponent<FlexChartProps>;
export declare type FlexPieInputs = FlexChartBaseInputs & {
    binding?: string;
    bindingName?: string;
    chartsPerLine?: number;
    dataLabel?: Partial<wjcChart.PieDataLabel>;
    innerRadius?: number;
    innerText?: any;
    innerTextStyle?: any;
    isAnimated?: boolean;
    offset?: number;
    reversed?: boolean;
    selectedIndex?: number;
    selectedItemOffset?: number;
    selectedItemPosition?: wjcChart.Position | string;
    startAngle?: number;
    titles?: string[];
    tooltip?: Partial<wjcChart.ChartTooltip>;
};
export declare type FlexPieEvents<T> = FlexChartBaseEvents<T> & {};
export declare const FlexPieMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexPieProps = FlexPieInputs & FlexPieEvents<wjcChart.FlexPie>;
export declare type FlexPieRef = WjRef<wjcChart.FlexPie>;
/**
 * React component for the {@link wijmo.chart.FlexPie} control.
 *
 * The <b>flex-pie</b> component may contain
 * the following child components:
 * {@link wijmo.react.chart.animation.FlexChartAnimation}
 * , {@link wijmo.react.chart.FlexChartLegend}
 * and {@link wijmo.react.chart.FlexPieDataLabel}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.FlexPie} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexPie: React.ForwardRefExoticComponent<FlexPieProps>;
export declare type FlexChartAxisInputs = BaseInputs & {
    axisLine?: boolean;
    binding?: string;
    format?: string;
    groupsOptions?: wjcChart.IAxisGroupsOptions;
    itemFormatter?: Function;
    itemsSource?: any;
    labelAlign?: string;
    labelAngle?: number;
    labelMax?: boolean;
    labelMin?: boolean;
    labelPadding?: number;
    labels?: boolean;
    logBase?: number;
    majorGrid?: boolean;
    majorTickMarks?: wjcChart.TickMark | string;
    majorUnit?: number;
    max?: any;
    min?: any;
    minorGrid?: boolean;
    minorTickMarks?: wjcChart.TickMark | string;
    minorUnit?: number;
    name?: string;
    origin?: number;
    overlappingLabels?: wjcChart.OverlappingLabels | string;
    plotArea?: wjcChart.PlotArea;
    position?: wjcChart.Position | string;
    reversed?: boolean;
    title?: string;
    wjProperty?: string;
};
export declare type FlexChartAxisEvents<T> = {
    rangeChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const FlexChartAxisMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartAxisProps = FlexChartAxisInputs & FlexChartAxisEvents<wjcChart.Axis>;
export declare type FlexChartAxisRef = WjRef<wjcChart.Axis>;
/**
 * React component for the {@link wijmo.chart.Axis} class.
 *
 * The <b>flex-chart-axis</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 * , {@link wijmo.react.chart.FlexChartSeries}
 * , {@link wijmo.react.chart.finance.FinancialChart}
 *  or {@link wijmo.react.chart.finance.FinancialChartSeries}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.Axis} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartAxis: React.ForwardRefExoticComponent<FlexChartAxisProps>;
export declare type FlexChartLegendInputs = BaseInputs & {
    maxSize?: number | string;
    orientation?: wjcChart.Orientation | string;
    position?: wjcChart.Position | string;
    reverse?: boolean;
    scrollbar?: boolean;
    title?: string;
    titleAlign?: string;
};
export declare type FlexChartLegendEvents<T> = {};
export declare const FlexChartLegendMeta: {
    inputs: string[];
    events: any[];
};
export declare type FlexChartLegendProps = FlexChartLegendInputs & FlexChartLegendEvents<wjcChart.Legend>;
export declare type FlexChartLegendRef = WjRef<wjcChart.Legend>;
/**
 * React component for the {@link wijmo.chart.Legend} class.
 *
 * The <b>flex-chart-legend</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 * , {@link wijmo.react.chart.FlexPie}
 * , {@link wijmo.react.chart.finance.FinancialChart}
 * , {@link wijmo.react.chart.radar.FlexRadar}
 * , {@link wijmo.react.chart.hierarchical.Sunburst}
 *  or {@link wijmo.react.chart.map.FlexMap}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.Legend} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartLegend: React.ForwardRefExoticComponent<FlexChartLegendProps>;
export declare type DataLabelBaseInputs = BaseInputs & {
    border?: boolean;
    connectingLine?: boolean;
    content?: any;
    offset?: number;
};
export declare type DataLabelBaseEvents<T> = {
    rendering?: wjcCore.IEventHandler<T, wjcChart.DataLabelRenderEventArgs>;
};
export declare const DataLabelBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartDataLabelInputs = DataLabelBaseInputs & {
    position?: wjcChart.LabelPosition | string;
};
export declare type FlexChartDataLabelEvents<T> = DataLabelBaseEvents<T> & {};
export declare const FlexChartDataLabelMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartDataLabelProps = FlexChartDataLabelInputs & FlexChartDataLabelEvents<wjcChart.DataLabel>;
export declare type FlexChartDataLabelRef = WjRef<wjcChart.DataLabel>;
/**
 * React component for the {@link wijmo.chart.DataLabel} class.
 *
 * The <b>flex-chart-data-label</b> component should be contained in
 * a {@link wijmo.react.chart.FlexChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.DataLabel} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartDataLabel: React.ForwardRefExoticComponent<FlexChartDataLabelProps>;
export declare type FlexPieDataLabelInputs = DataLabelBaseInputs & {
    position?: wjcChart.PieLabelPosition | string;
};
export declare type FlexPieDataLabelEvents<T> = DataLabelBaseEvents<T> & {};
export declare const FlexPieDataLabelMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexPieDataLabelProps = FlexPieDataLabelInputs & FlexPieDataLabelEvents<wjcChart.PieDataLabel>;
export declare type FlexPieDataLabelRef = WjRef<wjcChart.PieDataLabel>;
/**
 * React component for the {@link wijmo.chart.PieDataLabel} class.
 *
 * The <b>flex-pie-data-label</b> component should be contained in
 * a {@link wijmo.react.chart.FlexPie} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.PieDataLabel} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexPieDataLabel: React.ForwardRefExoticComponent<FlexPieDataLabelProps>;
export declare type SeriesBaseInputs = BaseInputs & {
    altStyle?: any;
    axisX?: Partial<wjcChart.Axis>;
    axisY?: Partial<wjcChart.Axis>;
    binding?: string;
    bindingX?: string;
    cssClass?: string;
    interpolateNulls?: boolean;
    itemFormatter?: Function;
    itemsSource?: any[] | wjcCore.ICollectionView;
    name?: string;
    style?: any;
    symbolMarker?: wjcChart.Marker | string;
    symbolSize?: number;
    symbolStyle?: any;
    tooltipContent?: any;
    visibility?: wjcChart.SeriesVisibility | string;
    children?: any;
};
export declare type SeriesBaseEvents<T> = {
    rendered?: wjcCore.IEventHandler<T, wjcChart.RenderEventArgs>;
    rendering?: wjcCore.IEventHandler<T, wjcChart.SeriesRenderingEventArgs>;
};
export declare const SeriesBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartSeriesInputs = SeriesBaseInputs & {
    chartType?: wjcChart.ChartType | string;
};
export declare type FlexChartSeriesEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartSeriesMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartSeriesProps = FlexChartSeriesInputs & FlexChartSeriesEvents<wjcChart.Series>;
export declare type FlexChartSeriesRef = WjRef<wjcChart.Series>;
/**
 * React component for the {@link wijmo.chart.Series} class.
 *
 * The <b>flex-chart-series</b> component should be contained in
 * a {@link wijmo.react.chart.FlexChart} component.
 *
 * The <b>flex-chart-series</b> component may contain
 * a {@link wijmo.react.chart.FlexChartAxis} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.Series} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartSeries: React.ForwardRefExoticComponent<FlexChartSeriesProps>;
export declare type FlexChartLineMarkerInputs = BaseInputs & {
    alignment?: wjcChart.LineMarkerAlignment | string;
    content?: Function;
    dragContent?: boolean;
    dragLines?: boolean;
    dragThreshold?: number;
    horizontalPosition?: number;
    interaction?: wjcChart.LineMarkerInteraction | string;
    isVisible?: boolean;
    lines?: wjcChart.LineMarkerLines | string;
    seriesIndex?: number;
    verticalPosition?: number;
};
export declare type FlexChartLineMarkerEvents<T> = {
    positionChanged?: wjcCore.IEventHandler<T, wjcCore.Point>;
};
export declare const FlexChartLineMarkerMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartLineMarkerProps = FlexChartLineMarkerInputs & FlexChartLineMarkerEvents<wjcChart.LineMarker>;
export declare type FlexChartLineMarkerRef = WjRef<wjcChart.LineMarker>;
/**
 * React component for the {@link wijmo.chart.LineMarker} class.
 *
 * The <b>flex-chart-line-marker</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.LineMarker} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartLineMarker: React.ForwardRefExoticComponent<FlexChartLineMarkerProps>;
export declare type FlexChartDataPointInputs = BaseInputs & {
    x?: any;
    y?: any;
    wjProperty?: string;
};
export declare type FlexChartDataPointEvents<T> = {};
export declare const FlexChartDataPointMeta: {
    inputs: string[];
    events: any[];
};
export declare type FlexChartDataPointProps = FlexChartDataPointInputs & FlexChartDataPointEvents<wjcChart.DataPoint>;
export declare type FlexChartDataPointRef = WjRef<wjcChart.DataPoint>;
/**
 * React component for the {@link wijmo.chart.DataPoint} class.
 *
 * The <b>flex-chart-data-point</b> component should be contained in
 * a {@link wijmo.react.chart.annotation.FlexChartAnnotation} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.DataPoint} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartDataPoint: React.ForwardRefExoticComponent<FlexChartDataPointProps>;
export declare type FlexChartPlotAreaInputs = BaseInputs & {
    column?: number;
    height?: any;
    name?: string;
    row?: number;
    style?: any;
    width?: any;
};
export declare type FlexChartPlotAreaEvents<T> = {};
export declare const FlexChartPlotAreaMeta: {
    inputs: string[];
    events: any[];
};
export declare type FlexChartPlotAreaProps = FlexChartPlotAreaInputs & FlexChartPlotAreaEvents<wjcChart.PlotArea>;
export declare type FlexChartPlotAreaRef = WjRef<wjcChart.PlotArea>;
/**
 * React component for the {@link wijmo.chart.PlotArea} class.
 *
 * The <b>flex-chart-plot-area</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.PlotArea} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartPlotArea: React.ForwardRefExoticComponent<FlexChartPlotAreaProps>;
