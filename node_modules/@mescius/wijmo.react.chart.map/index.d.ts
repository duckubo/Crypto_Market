/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.chart.map}
 * Contains React components for the <b>wijmo.chart.map</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { BaseInputs, WjRef } from '@mescius/wijmo.react.base';
import { FlexChartBaseEvents, FlexChartBaseInputs } from '@mescius/wijmo.react.chart';
import * as React from 'react';
import * as wjcCore from '@mescius/wijmo';
import * as wjcChartMap from '@mescius/wijmo.chart.map';
export declare type FlexMapInputs = FlexChartBaseInputs & {
    center?: Partial<wjcCore.Point>;
    zoom?: number;
    tooltipContent?: any;
    layers?: any[];
    tooltip?: any;
};
export declare type FlexMapEvents<T> = FlexChartBaseEvents<T> & {};
export declare const FlexMapMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexMapProps = FlexMapInputs & FlexMapEvents<wjcChartMap.FlexMap>;
export declare type FlexMapRef = WjRef<wjcChartMap.FlexMap>;
/**
 * React component for the {@link wijmo.chart.map.FlexMap} control.
 *
 * The <b>flex-map</b> component may contain
 * the following child components:
 * {@link wijmo.react.chart.FlexChartLegend}
 * , {@link wijmo.react.chart.map.ScatterMapLayer}
 * , {@link wijmo.react.chart.map.GeoMapLayer}
 * and {@link wijmo.react.chart.map.GeoGridLayer}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.map.FlexMap} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexMap: React.ForwardRefExoticComponent<FlexMapProps>;
export declare type MapLayerBaseInputs = BaseInputs & {
    colorScale?: Partial<wjcChartMap.ColorScale>;
    itemsSource?: any;
    style?: any;
    url?: string;
    children?: any;
};
export declare type MapLayerBaseEvents<T> = {
    itemsSourceChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const MapLayerBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type ScatterMapLayerInputs = MapLayerBaseInputs & {
    binding?: string;
    itemsSource?: any;
    symbolMaxSize?: number;
    symbolMinSize?: number;
    symbolSize?: number;
    url?: string;
};
export declare type ScatterMapLayerEvents<T> = MapLayerBaseEvents<T> & {};
export declare const ScatterMapLayerMeta: {
    inputs: string[];
    events: string[];
};
export declare type ScatterMapLayerProps = ScatterMapLayerInputs & ScatterMapLayerEvents<wjcChartMap.ScatterMapLayer>;
export declare type ScatterMapLayerRef = WjRef<wjcChartMap.ScatterMapLayer>;
/**
 * React component for the {@link wijmo.chart.map.ScatterMapLayer} class.
 *
 * The <b>scatter-map-layer</b> component should be contained in
 * a {@link wijmo.react.chart.map.FlexMap} component.
 *
 * The <b>scatter-map-layer</b> component may contain
 * a {@link wijmo.react.chart.map.ColorScale} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.map.ScatterMapLayer} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const ScatterMapLayer: React.ForwardRefExoticComponent<ScatterMapLayerProps>;
export declare type GeoMapLayerInputs = MapLayerBaseInputs & {
    itemFormatter?: any;
    symbolSize?: number;
};
export declare type GeoMapLayerEvents<T> = MapLayerBaseEvents<T> & {};
export declare const GeoMapLayerMeta: {
    inputs: string[];
    events: string[];
};
export declare type GeoMapLayerProps = GeoMapLayerInputs & GeoMapLayerEvents<wjcChartMap.GeoMapLayer>;
export declare type GeoMapLayerRef = WjRef<wjcChartMap.GeoMapLayer>;
/**
 * React component for the {@link wijmo.chart.map.GeoMapLayer} class.
 *
 * The <b>geo-map-layer</b> component should be contained in
 * a {@link wijmo.react.chart.map.FlexMap} component.
 *
 * The <b>geo-map-layer</b> component may contain
 * a {@link wijmo.react.chart.map.ColorScale} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.map.GeoMapLayer} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const GeoMapLayer: React.ForwardRefExoticComponent<GeoMapLayerProps>;
export declare type GeoGridLayerInputs = MapLayerBaseInputs & {};
export declare type GeoGridLayerEvents<T> = MapLayerBaseEvents<T> & {};
export declare const GeoGridLayerMeta: {
    inputs: string[];
    events: string[];
};
export declare type GeoGridLayerProps = GeoGridLayerInputs & GeoGridLayerEvents<wjcChartMap.GeoGridLayer>;
export declare type GeoGridLayerRef = WjRef<wjcChartMap.GeoGridLayer>;
/**
 * React component for the {@link wijmo.chart.map.GeoGridLayer} class.
 *
 * The <b>geo-grid-layer</b> component should be contained in
 * a {@link wijmo.react.chart.map.FlexMap} component.
 *
 * The <b>geo-grid-layer</b> component may contain
 * a {@link wijmo.react.chart.map.ColorScale} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.map.GeoGridLayer} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const GeoGridLayer: React.ForwardRefExoticComponent<GeoGridLayerProps>;
export declare type ColorScaleInputs = BaseInputs & {
    binding?: string | Function;
    colorUnknown?: string;
    colors?: string[];
    format?: string;
    scale?: any;
};
export declare type ColorScaleEvents<T> = {
    itemsSourceChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const ColorScaleMeta: {
    inputs: string[];
    events: any[];
};
export declare type ColorScaleProps = ColorScaleInputs & ColorScaleEvents<wjcChartMap.ColorScale>;
export declare type ColorScaleRef = WjRef<wjcChartMap.ColorScale>;
/**
 * React component for the {@link wijmo.chart.map.ColorScale} class.
 *
 * The <b>color-scale</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.map.ScatterMapLayer}
 * , {@link wijmo.react.chart.map.GeoMapLayer}
 *  or {@link wijmo.react.chart.map.GeoGridLayer}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.map.ColorScale} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const ColorScale: React.ForwardRefExoticComponent<ColorScaleProps>;
