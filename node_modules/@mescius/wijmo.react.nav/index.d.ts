/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.nav}
 * Contains React components for the <b>wijmo.nav</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { ControlBaseEvents, ControlBaseInputs, WjRef, BaseInputs } from '@mescius/wijmo.react.base';
import * as React from 'react';
import * as wjcCore from '@mescius/wijmo';
import * as wjcNav from '@mescius/wijmo.nav';
export declare type TreeViewInputs = ControlBaseInputs & {
    allowDragging?: boolean;
    autoCollapse?: boolean;
    checkOnClick?: boolean;
    checkedMemberPath?: string | string[];
    childItemsPath?: string | string[];
    collapseOnClick?: boolean;
    collapseWhenDisabled?: boolean;
    displayMemberPath?: string | string[];
    expandOnClick?: boolean;
    expandOnLoad?: boolean;
    imageMemberPath?: string | string[];
    isAnimated?: boolean;
    isContentHtml?: boolean;
    isReadOnly?: boolean;
    itemsSource?: any[];
    lazyLoadFunction?: wjcNav.ILazyLoad;
    selectedItem?: any;
    selectedNode?: wjcNav.TreeNode;
    showCheckboxes?: boolean;
    totalItemCount?: number;
    preserveSelectedNode?: boolean;
    allowMultiSelect?: boolean;
};
export declare type TreeViewEvents<T> = ControlBaseEvents<T> & {
    checkedItemsChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    dragEnd?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    dragOver?: wjcCore.IEventHandler<T, wjcNav.TreeNodeDragDropEventArgs>;
    dragStart?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    drop?: wjcCore.IEventHandler<T, wjcNav.TreeNodeDragDropEventArgs>;
    formatItem?: wjcCore.IEventHandler<T, wjcNav.FormatNodeEventArgs>;
    isCheckedChanged?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    isCheckedChanging?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    isCollapsedChanged?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    isCollapsedChanging?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    itemClicked?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    itemsSourceChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    loadedItems?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    loadingItems?: wjcCore.IEventHandler<T, wjcCore.CancelEventArgs>;
    nodeEditEnded?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    nodeEditEnding?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    nodeEditStarted?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    nodeEditStarting?: wjcCore.IEventHandler<T, wjcNav.TreeNodeEventArgs>;
    selectedItemChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const TreeViewMeta: {
    inputs: string[];
    events: string[];
};
export declare type TreeViewProps = TreeViewInputs & TreeViewEvents<wjcNav.TreeView>;
export declare type TreeViewRef = WjRef<wjcNav.TreeView>;
/**
 * React component for the {@link wijmo.nav.TreeView} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.nav.TreeView} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const TreeView: React.ForwardRefExoticComponent<TreeViewProps>;
export declare type TabPanelInputs = ControlBaseInputs & {
    autoSwitch?: boolean;
    isAnimated?: boolean;
    selectedIndex?: number;
    selectedTab?: wjcNav.Tab;
};
export declare type TabPanelEvents<T> = ControlBaseEvents<T> & {
    selectedIndexChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const TabPanelMeta: {
    inputs: string[];
    events: string[];
};
export declare type TabPanelProps = TabPanelInputs & TabPanelEvents<wjcNav.TabPanel>;
export declare type TabPanelRef = WjRef<wjcNav.TabPanel>;
/**
 * React component for the {@link wijmo.nav.TabPanel} control.
 *
 * The <b>tab-panel</b> component may contain
 * a {@link wijmo.react.nav.Tab} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.nav.TabPanel} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const TabPanel: React.ForwardRefExoticComponent<TabPanelProps>;
export declare type TabInputs = BaseInputs & {
    isDisabled?: boolean;
    isVisible?: boolean;
    children?: any;
};
export declare type TabEvents<T> = {};
export declare const TabMeta: {
    inputs: string[];
    events: any[];
};
export declare type TabProps = TabInputs & TabEvents<wjcNav.Tab>;
export declare type TabRef = WjRef<wjcNav.Tab>;
/**
 * React component for the {@link wijmo.nav.Tab} class.
 *
 * The <b>tab</b> component should be contained in
 * a {@link wijmo.react.nav.TabPanel} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.nav.Tab} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const Tab: React.ForwardRefExoticComponent<TabProps>;
export declare type AccordionInputs = ControlBaseInputs & {
    allowCollapseAll?: boolean;
    allowExpandMany?: boolean;
    autoSwitch?: boolean;
    isAnimated?: boolean;
    selectedIndex?: number;
    selectedPane?: wjcNav.AccordionPane;
    showIcons?: boolean;
};
export declare type AccordionEvents<T> = ControlBaseEvents<T> & {
    selectedIndexChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const AccordionMeta: {
    inputs: string[];
    events: string[];
};
export declare type AccordionProps = AccordionInputs & AccordionEvents<wjcNav.Accordion>;
export declare type AccordionRef = WjRef<wjcNav.Accordion>;
/**
 * React component for the {@link wijmo.nav.Accordion} control.
 *
 * The <b>accordion</b> component may contain
 * a {@link wijmo.react.nav.AccordionPane} child component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.nav.Accordion} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const Accordion: React.ForwardRefExoticComponent<AccordionProps>;
export declare type AccordionPaneInputs = BaseInputs & {
    isCollapsed?: boolean;
    isDisabled?: boolean;
    isVisible?: boolean;
    children?: any;
};
export declare type AccordionPaneEvents<T> = {};
export declare const AccordionPaneMeta: {
    inputs: string[];
    events: any[];
};
export declare type AccordionPaneProps = AccordionPaneInputs & AccordionPaneEvents<wjcNav.AccordionPane>;
export declare type AccordionPaneRef = WjRef<wjcNav.AccordionPane>;
/**
 * React component for the {@link wijmo.nav.AccordionPane} class.
 *
 * The <b>accordion-pane</b> component should be contained in
 * a {@link wijmo.react.nav.Accordion} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.nav.AccordionPane} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const AccordionPane: React.ForwardRefExoticComponent<AccordionPaneProps>;
