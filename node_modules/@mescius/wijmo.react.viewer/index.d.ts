/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.viewer}
 * Contains React components for the <b>wijmo.viewer</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { ControlBaseEvents, ControlBaseInputs, WjRef } from '@mescius/wijmo.react.base';
import * as React from 'react';
import * as wjcCore from '@mescius/wijmo';
import * as wjcViewer from '@mescius/wijmo.viewer';
export declare type ViewerBaseInputs = ControlBaseInputs & {
    filePath?: string;
    fullScreen?: boolean;
    mouseMode?: wjcViewer.MouseMode | string;
    requestHeaders?: any;
    serviceUrl?: string;
    thresholdWidth?: number;
    viewMode?: wjcViewer.ViewMode | string;
    zoomFactor?: number;
    zoomMode?: wjcViewer.ZoomMode | string;
};
export declare type ViewerBaseEvents<T> = ControlBaseEvents<T> & {
    beforeSendRequest?: wjcCore.IEventHandler<T, wjcViewer.RequestEventArgs>;
    fullScreenChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    mouseModeChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    pageIndexChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    pageLoaded?: wjcCore.IEventHandler<T, wjcViewer.PageLoadedEventArgs>;
    queryLoadingData?: wjcCore.IEventHandler<T, wjcViewer.QueryLoadingDataEventArgs>;
    viewModeChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    zoomFactorChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    zoomModeChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const ViewerBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type ReportViewerInputs = ViewerBaseInputs & {
    paginated?: boolean;
    parameters?: any;
    reportName?: string;
};
export declare type ReportViewerEvents<T> = ViewerBaseEvents<T> & {};
export declare const ReportViewerMeta: {
    inputs: string[];
    events: string[];
};
export declare type ReportViewerProps = ReportViewerInputs & ReportViewerEvents<wjcViewer.ReportViewer>;
export declare type ReportViewerRef = WjRef<wjcViewer.ReportViewer>;
/**
 * React component for the {@link wijmo.viewer.ReportViewer} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.viewer.ReportViewer} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const ReportViewer: React.ForwardRefExoticComponent<ReportViewerProps>;
export declare type PdfViewerInputs = ViewerBaseInputs & {};
export declare type PdfViewerEvents<T> = ViewerBaseEvents<T> & {};
export declare const PdfViewerMeta: {
    inputs: string[];
    events: string[];
};
export declare type PdfViewerProps = PdfViewerInputs & PdfViewerEvents<wjcViewer.PdfViewer>;
export declare type PdfViewerRef = WjRef<wjcViewer.PdfViewer>;
/**
 * React component for the {@link wijmo.viewer.PdfViewer} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.viewer.PdfViewer} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const PdfViewer: React.ForwardRefExoticComponent<PdfViewerProps>;
