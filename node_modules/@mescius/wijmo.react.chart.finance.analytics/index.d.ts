/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.chart.finance.analytics}
 * Contains React components for the <b>wijmo.chart.finance.analytics</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { SeriesBaseEvents, SeriesBaseInputs } from '@mescius/wijmo.react.chart';
import { DataPoint, LabelPosition } from '@mescius/wijmo.chart';
import * as React from 'react';
import * as wjcReactBase from '@mescius/wijmo.react.base';
import * as wjcChartFinanceAnalytics from '@mescius/wijmo.chart.finance.analytics';
export declare type FlexChartFibonacciInputs = SeriesBaseInputs & {
    high?: number;
    labelPosition?: LabelPosition | string;
    levels?: number[];
    low?: number;
    maxX?: any;
    minX?: any;
    uptrend?: boolean;
};
export declare type FlexChartFibonacciEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartFibonacciMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartFibonacciProps = FlexChartFibonacciInputs & FlexChartFibonacciEvents<wjcChartFinanceAnalytics.Fibonacci>;
export declare type FlexChartFibonacciRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.Fibonacci>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.Fibonacci} class.
 *
 * The <b>flex-chart-fibonacci</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.Fibonacci} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartFibonacci: React.ForwardRefExoticComponent<FlexChartFibonacciProps>;
export declare type FlexChartFibonacciArcsInputs = SeriesBaseInputs & {
    end?: Partial<DataPoint>;
    labelPosition?: LabelPosition | string;
    levels?: number[];
    start?: Partial<DataPoint>;
};
export declare type FlexChartFibonacciArcsEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartFibonacciArcsMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartFibonacciArcsProps = FlexChartFibonacciArcsInputs & FlexChartFibonacciArcsEvents<wjcChartFinanceAnalytics.FibonacciArcs>;
export declare type FlexChartFibonacciArcsRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.FibonacciArcs>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.FibonacciArcs} class.
 *
 * The <b>flex-chart-fibonacci-arcs</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.FibonacciArcs} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartFibonacciArcs: React.ForwardRefExoticComponent<FlexChartFibonacciArcsProps>;
export declare type FlexChartFibonacciFansInputs = SeriesBaseInputs & {
    end?: Partial<DataPoint>;
    labelPosition?: LabelPosition | string;
    levels?: number[];
    start?: Partial<DataPoint>;
};
export declare type FlexChartFibonacciFansEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartFibonacciFansMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartFibonacciFansProps = FlexChartFibonacciFansInputs & FlexChartFibonacciFansEvents<wjcChartFinanceAnalytics.FibonacciFans>;
export declare type FlexChartFibonacciFansRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.FibonacciFans>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.FibonacciFans} class.
 *
 * The <b>flex-chart-fibonacci-fans</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.FibonacciFans} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartFibonacciFans: React.ForwardRefExoticComponent<FlexChartFibonacciFansProps>;
export declare type FlexChartFibonacciTimeZonesInputs = SeriesBaseInputs & {
    endX?: any;
    labelPosition?: LabelPosition | string;
    levels?: number[];
    startX?: any;
};
export declare type FlexChartFibonacciTimeZonesEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartFibonacciTimeZonesMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartFibonacciTimeZonesProps = FlexChartFibonacciTimeZonesInputs & FlexChartFibonacciTimeZonesEvents<wjcChartFinanceAnalytics.FibonacciTimeZones>;
export declare type FlexChartFibonacciTimeZonesRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.FibonacciTimeZones>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.FibonacciTimeZones} class.
 *
 * The <b>flex-chart-fibonacci-time-zones</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.FibonacciTimeZones} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartFibonacciTimeZones: React.ForwardRefExoticComponent<FlexChartFibonacciTimeZonesProps>;
export declare type OverlayIndicatorBaseInputs = SeriesBaseInputs & {};
export declare type OverlayIndicatorBaseEvents<T> = SeriesBaseEvents<T> & {};
export declare const OverlayIndicatorBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type SingleOverlayIndicatorBaseInputs = OverlayIndicatorBaseInputs & {
    period?: any;
};
export declare type SingleOverlayIndicatorBaseEvents<T> = OverlayIndicatorBaseEvents<T> & {};
export declare const SingleOverlayIndicatorBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartAtrInputs = SingleOverlayIndicatorBaseInputs & {};
export declare type FlexChartAtrEvents<T> = SingleOverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartAtrMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartAtrProps = FlexChartAtrInputs & FlexChartAtrEvents<wjcChartFinanceAnalytics.ATR>;
export declare type FlexChartAtrRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.ATR>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.ATR} class.
 *
 * The <b>flex-chart-atr</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.ATR} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartAtr: React.ForwardRefExoticComponent<FlexChartAtrProps>;
export declare type FlexChartCciInputs = SingleOverlayIndicatorBaseInputs & {
    constant?: number;
};
export declare type FlexChartCciEvents<T> = SingleOverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartCciMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartCciProps = FlexChartCciInputs & FlexChartCciEvents<wjcChartFinanceAnalytics.CCI>;
export declare type FlexChartCciRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.CCI>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.CCI} class.
 *
 * The <b>flex-chart-cci</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.CCI} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartCci: React.ForwardRefExoticComponent<FlexChartCciProps>;
export declare type FlexChartRsiInputs = SingleOverlayIndicatorBaseInputs & {};
export declare type FlexChartRsiEvents<T> = SingleOverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartRsiMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartRsiProps = FlexChartRsiInputs & FlexChartRsiEvents<wjcChartFinanceAnalytics.RSI>;
export declare type FlexChartRsiRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.RSI>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.RSI} class.
 *
 * The <b>flex-chart-rsi</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.RSI} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartRsi: React.ForwardRefExoticComponent<FlexChartRsiProps>;
export declare type FlexChartWilliamsRInputs = SingleOverlayIndicatorBaseInputs & {};
export declare type FlexChartWilliamsREvents<T> = SingleOverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartWilliamsRMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartWilliamsRProps = FlexChartWilliamsRInputs & FlexChartWilliamsREvents<wjcChartFinanceAnalytics.WilliamsR>;
export declare type FlexChartWilliamsRRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.WilliamsR>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.WilliamsR} class.
 *
 * The <b>flex-chart-williams-r</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.WilliamsR} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartWilliamsR: React.ForwardRefExoticComponent<FlexChartWilliamsRProps>;
export declare type MacdBaseInputs = OverlayIndicatorBaseInputs & {
    fastPeriod?: number;
    slowPeriod?: number;
    smoothingPeriod?: number;
};
export declare type MacdBaseEvents<T> = OverlayIndicatorBaseEvents<T> & {};
export declare const MacdBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartMacdInputs = MacdBaseInputs & {
    styles?: any;
};
export declare type FlexChartMacdEvents<T> = MacdBaseEvents<T> & {};
export declare const FlexChartMacdMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartMacdProps = FlexChartMacdInputs & FlexChartMacdEvents<wjcChartFinanceAnalytics.Macd>;
export declare type FlexChartMacdRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.Macd>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.Macd} class.
 *
 * The <b>flex-chart-macd</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.Macd} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartMacd: React.ForwardRefExoticComponent<FlexChartMacdProps>;
export declare type FlexChartMacdHistogramInputs = MacdBaseInputs & {};
export declare type FlexChartMacdHistogramEvents<T> = MacdBaseEvents<T> & {};
export declare const FlexChartMacdHistogramMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartMacdHistogramProps = FlexChartMacdHistogramInputs & FlexChartMacdHistogramEvents<wjcChartFinanceAnalytics.MacdHistogram>;
export declare type FlexChartMacdHistogramRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.MacdHistogram>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.MacdHistogram} class.
 *
 * The <b>flex-chart-macd-histogram</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.MacdHistogram} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartMacdHistogram: React.ForwardRefExoticComponent<FlexChartMacdHistogramProps>;
export declare type FlexChartStochasticInputs = OverlayIndicatorBaseInputs & {
    dPeriod?: number;
    kPeriod?: number;
    smoothingPeriod?: number;
    styles?: any;
};
export declare type FlexChartStochasticEvents<T> = OverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartStochasticMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartStochasticProps = FlexChartStochasticInputs & FlexChartStochasticEvents<wjcChartFinanceAnalytics.Stochastic>;
export declare type FlexChartStochasticRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.Stochastic>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.Stochastic} class.
 *
 * The <b>flex-chart-stochastic</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.Stochastic} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartStochastic: React.ForwardRefExoticComponent<FlexChartStochasticProps>;
export declare type FlexChartBollingerBandsInputs = OverlayIndicatorBaseInputs & {
    multiplier?: number;
    period?: any;
};
export declare type FlexChartBollingerBandsEvents<T> = OverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartBollingerBandsMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartBollingerBandsProps = FlexChartBollingerBandsInputs & FlexChartBollingerBandsEvents<wjcChartFinanceAnalytics.BollingerBands>;
export declare type FlexChartBollingerBandsRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.BollingerBands>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.BollingerBands} class.
 *
 * The <b>flex-chart-bollinger-bands</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.BollingerBands} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartBollingerBands: React.ForwardRefExoticComponent<FlexChartBollingerBandsProps>;
export declare type FlexChartEnvelopesInputs = OverlayIndicatorBaseInputs & {
    period?: any;
    size?: number;
    type?: wjcChartFinanceAnalytics.MovingAverageType | string;
};
export declare type FlexChartEnvelopesEvents<T> = OverlayIndicatorBaseEvents<T> & {};
export declare const FlexChartEnvelopesMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartEnvelopesProps = FlexChartEnvelopesInputs & FlexChartEnvelopesEvents<wjcChartFinanceAnalytics.Envelopes>;
export declare type FlexChartEnvelopesRef = wjcReactBase.WjRef<wjcChartFinanceAnalytics.Envelopes>;
/**
 * React component for the {@link wijmo.chart.finance.analytics.Envelopes} class.
 *
 * The <b>flex-chart-envelopes</b> component should be contained in
 * a {@link wijmo.react.chart.finance.FinancialChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.finance.analytics.Envelopes} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartEnvelopes: React.ForwardRefExoticComponent<FlexChartEnvelopesProps>;
