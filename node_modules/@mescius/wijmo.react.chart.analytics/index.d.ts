/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.chart.analytics}
 * Contains React components for the <b>wijmo.chart.analytics</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { WjRef } from '@mescius/wijmo.react.base';
import { FlexChartSeriesEvents, FlexChartSeriesInputs, SeriesBaseEvents, SeriesBaseInputs } from '@mescius/wijmo.react.chart';
import * as React from 'react';
import * as wjcChartAnalytics from '@mescius/wijmo.chart.analytics';
export declare type TrendLineBaseInputs = SeriesBaseInputs & {
    sampleCount?: number;
};
export declare type TrendLineBaseEvents<T> = SeriesBaseEvents<T> & {};
export declare const TrendLineBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartTrendLineInputs = TrendLineBaseInputs & {
    coefficients?: number[];
    fitType?: wjcChartAnalytics.TrendLineFitType | string;
    order?: number;
    minX?: number;
    maxX?: number;
};
export declare type FlexChartTrendLineEvents<T> = TrendLineBaseEvents<T> & {};
export declare const FlexChartTrendLineMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartTrendLineProps = FlexChartTrendLineInputs & FlexChartTrendLineEvents<wjcChartAnalytics.TrendLine>;
export declare type FlexChartTrendLineRef = WjRef<wjcChartAnalytics.TrendLine>;
/**
 * React component for the {@link wijmo.chart.analytics.TrendLine} class.
 *
 * The <b>flex-chart-trend-line</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.TrendLine} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartTrendLine: React.ForwardRefExoticComponent<FlexChartTrendLineProps>;
export declare type FlexChartMovingAverageInputs = TrendLineBaseInputs & {
    period?: number;
    type?: wjcChartAnalytics.MovingAverageType | string;
};
export declare type FlexChartMovingAverageEvents<T> = TrendLineBaseEvents<T> & {};
export declare const FlexChartMovingAverageMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartMovingAverageProps = FlexChartMovingAverageInputs & FlexChartMovingAverageEvents<wjcChartAnalytics.MovingAverage>;
export declare type FlexChartMovingAverageRef = WjRef<wjcChartAnalytics.MovingAverage>;
/**
 * React component for the {@link wijmo.chart.analytics.MovingAverage} class.
 *
 * The <b>flex-chart-moving-average</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.MovingAverage} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartMovingAverage: React.ForwardRefExoticComponent<FlexChartMovingAverageProps>;
export declare type FunctionSeriesInputs = TrendLineBaseInputs & {
    max?: number;
    min?: number;
};
export declare type FunctionSeriesEvents<T> = TrendLineBaseEvents<T> & {};
export declare const FunctionSeriesMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartYFunctionSeriesInputs = FunctionSeriesInputs & {
    func: Function;
};
export declare type FlexChartYFunctionSeriesEvents<T> = FunctionSeriesEvents<T> & {};
export declare const FlexChartYFunctionSeriesMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartYFunctionSeriesProps = FlexChartYFunctionSeriesInputs & FlexChartYFunctionSeriesEvents<wjcChartAnalytics.YFunctionSeries>;
export declare type FlexChartYFunctionSeriesRef = WjRef<wjcChartAnalytics.YFunctionSeries>;
/**
 * React component for the {@link wijmo.chart.analytics.YFunctionSeries} class.
 *
 * The <b>flex-chart-y-function-series</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.YFunctionSeries} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartYFunctionSeries: React.ForwardRefExoticComponent<FlexChartYFunctionSeriesProps>;
export declare type FlexChartParametricFunctionSeriesInputs = FunctionSeriesInputs & {
    xFunc?: Function;
    yFunc?: Function;
};
export declare type FlexChartParametricFunctionSeriesEvents<T> = FunctionSeriesEvents<T> & {};
export declare const FlexChartParametricFunctionSeriesMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartParametricFunctionSeriesProps = FlexChartParametricFunctionSeriesInputs & FlexChartParametricFunctionSeriesEvents<wjcChartAnalytics.ParametricFunctionSeries>;
export declare type FlexChartParametricFunctionSeriesRef = WjRef<wjcChartAnalytics.ParametricFunctionSeries>;
/**
 * React component for the {@link wijmo.chart.analytics.ParametricFunctionSeries} class.
 *
 * The <b>flex-chart-parametric-function-series</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.ParametricFunctionSeries} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartParametricFunctionSeries: React.ForwardRefExoticComponent<FlexChartParametricFunctionSeriesProps>;
export declare type FlexChartWaterfallInputs = SeriesBaseInputs & {
    connectorLines?: boolean;
    intermediateTotalLabels?: any;
    intermediateTotalPositions?: number[];
    relativeData?: boolean;
    showIntermediateTotal?: boolean;
    showTotal?: boolean;
    start?: number;
    startLabel?: string;
    styles?: any;
    totalLabel?: string;
    initialized?: any;
};
export declare type FlexChartWaterfallEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartWaterfallMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartWaterfallProps = FlexChartWaterfallInputs & FlexChartWaterfallEvents<wjcChartAnalytics.Waterfall>;
export declare type FlexChartWaterfallRef = WjRef<wjcChartAnalytics.Waterfall>;
/**
 * React component for the {@link wijmo.chart.analytics.Waterfall} class.
 *
 * The <b>flex-chart-waterfall</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.Waterfall} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartWaterfall: React.ForwardRefExoticComponent<FlexChartWaterfallProps>;
export declare type FlexChartBoxWhiskerInputs = SeriesBaseInputs & {
    gapWidth?: number;
    groupWidth?: number;
    meanLineStyle?: any;
    meanMarkerStyle?: any;
    quartileCalculation?: wjcChartAnalytics.QuartileCalculation | string;
    showInnerPoints?: boolean;
    showMeanLine?: boolean;
    showMeanMarker?: boolean;
    showOutliers?: boolean;
};
export declare type FlexChartBoxWhiskerEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartBoxWhiskerMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartBoxWhiskerProps = FlexChartBoxWhiskerInputs & FlexChartBoxWhiskerEvents<wjcChartAnalytics.BoxWhisker>;
export declare type FlexChartBoxWhiskerRef = WjRef<wjcChartAnalytics.BoxWhisker>;
/**
 * React component for the {@link wijmo.chart.analytics.BoxWhisker} class.
 *
 * The <b>flex-chart-box-whisker</b> component should be contained in
 * one of the following components:
 * {@link wijmo.react.chart.FlexChart}
 *  or {@link wijmo.react.chart.finance.FinancialChart}.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.BoxWhisker} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartBoxWhisker: React.ForwardRefExoticComponent<FlexChartBoxWhiskerProps>;
export declare type FlexChartErrorBarInputs = FlexChartSeriesInputs & {
    direction?: wjcChartAnalytics.ErrorBarDirection | string;
    endStyle?: wjcChartAnalytics.ErrorBarEndStyle | string;
    errorAmount?: wjcChartAnalytics.ErrorAmount | string;
    errorBarStyle?: any;
    value?: any;
};
export declare type FlexChartErrorBarEvents<T> = FlexChartSeriesEvents<T> & {};
export declare const FlexChartErrorBarMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartErrorBarProps = FlexChartErrorBarInputs & FlexChartErrorBarEvents<wjcChartAnalytics.ErrorBar>;
export declare type FlexChartErrorBarRef = WjRef<wjcChartAnalytics.ErrorBar>;
/**
 * React component for the {@link wijmo.chart.analytics.ErrorBar} class.
 *
 * The <b>flex-chart-error-bar</b> component should be contained in
 * a {@link wijmo.react.chart.FlexChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.ErrorBar} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartErrorBar: React.ForwardRefExoticComponent<FlexChartErrorBarProps>;
export declare type FlexChartBreakEvenInputs = SeriesBaseInputs & {
    fixedCost?: number;
    salesPrice?: number;
    styles?: wjcChartAnalytics.IBreakEvenStyles;
    variableCost?: number;
};
export declare type FlexChartBreakEvenEvents<T> = SeriesBaseEvents<T> & {};
export declare const FlexChartBreakEvenMeta: {
    inputs: string[];
    events: string[];
};
export declare type FlexChartBreakEvenProps = FlexChartBreakEvenInputs & FlexChartBreakEvenEvents<wjcChartAnalytics.BreakEven>;
export declare type FlexChartBreakEvenRef = WjRef<wjcChartAnalytics.BreakEven>;
/**
 * React component for the {@link wijmo.chart.analytics.BreakEven} class.
 *
 * The <b>flex-chart-break-even</b> component should be contained in
 * a {@link wijmo.react.chart.FlexChart} component.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.chart.analytics.BreakEven} class it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const FlexChartBreakEven: React.ForwardRefExoticComponent<FlexChartBreakEvenProps>;
