/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.barcode.common}
 * Contains React components for the <b>wijmo.barcode.common</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { BarcodeBaseEvents, BarcodeBaseInputs } from '@mescius/wijmo.react.barcode.base';
import { IQuietZoneWithAddOn, LabelPosition, NarrowToWideRatio } from '@mescius/wijmo.barcode';
import * as React from 'react';
import * as wjcReactBase from '@mescius/wijmo.react.base';
import * as wjcBarcodeCommon from '@mescius/wijmo.barcode.common';
export declare type BarcodeCodebarInputs = BarcodeBaseInputs & {
    autoWidth?: boolean;
    autoWidthZoom?: number;
    checkDigit?: number;
    labelPosition?: LabelPosition | string;
    nwRatio?: NarrowToWideRatio | string;
    showLabel?: boolean;
};
export declare type BarcodeCodebarEvents<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeCodebarMeta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeCodabarProps = BarcodeCodebarInputs & BarcodeCodebarEvents<wjcBarcodeCommon.Codabar>;
export declare type BarcodeCodabarRef = wjcReactBase.WjRef<wjcBarcodeCommon.Codabar>;
/**
 * React component for the {@link wijmo.barcode.common.Codabar} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.Codabar} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeCodabar: React.ForwardRefExoticComponent<BarcodeCodabarProps>;
export declare type BarcodeEanBaseInputs = BarcodeBaseInputs & {
    labelPosition?: LabelPosition | string;
    showLabel?: boolean;
};
export declare type BarcodeEanBaseEvents<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeEanBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeEan8Inputs = BarcodeEanBaseInputs & {};
export declare type BarcodeEan8Events<T> = BarcodeEanBaseEvents<T> & {};
export declare const BarcodeEan8Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeEan8Props = BarcodeEan8Inputs & BarcodeEan8Events<wjcBarcodeCommon.Ean8>;
export declare type BarcodeEan8Ref = wjcReactBase.WjRef<wjcBarcodeCommon.Ean8>;
/**
 * React component for the {@link wijmo.barcode.common.Ean8} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.Ean8} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeEan8: React.ForwardRefExoticComponent<BarcodeEan8Props>;
export declare type BarcodeEan13Inputs = BarcodeEanBaseInputs & {
    addOn?: string | number;
    addOnHeight?: string | number;
    addOnLabelPosition?: LabelPosition | string;
};
export declare type BarcodeEan13Events<T> = BarcodeEanBaseEvents<T> & {};
export declare const BarcodeEan13Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeEan13Props = BarcodeEan13Inputs & BarcodeEan13Events<wjcBarcodeCommon.Ean13>;
export declare type BarcodeEan13Ref = wjcReactBase.WjRef<wjcBarcodeCommon.Ean13>;
/**
 * React component for the {@link wijmo.barcode.common.Ean13} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.Ean13} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeEan13: React.ForwardRefExoticComponent<BarcodeEan13Props>;
export declare type BarcodeCode39Inputs = BarcodeBaseInputs & {
    autoWidth?: boolean;
    autoWidthZoom?: number;
    checkDigit?: boolean;
    fullAscii?: boolean;
    labelPosition?: LabelPosition | string;
    labelWithStartAndStopCharacter?: boolean;
    nwRatio?: NarrowToWideRatio | string;
    showLabel?: boolean;
};
export declare type BarcodeCode39Events<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeCode39Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeCode39Props = BarcodeCode39Inputs & BarcodeCode39Events<wjcBarcodeCommon.Code39>;
export declare type BarcodeCode39Ref = wjcReactBase.WjRef<wjcBarcodeCommon.Code39>;
/**
 * React component for the {@link wijmo.barcode.common.Code39} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.Code39} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeCode39: React.ForwardRefExoticComponent<BarcodeCode39Props>;
export declare type BarcodeCode128Inputs = BarcodeBaseInputs & {
    autoWidth?: boolean;
    autoWidthZoom?: number;
    codeSet?: wjcBarcodeCommon.Code128CodeSet | string;
    labelPosition?: LabelPosition | string;
    showLabel?: boolean;
};
export declare type BarcodeCode128Events<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeCode128Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeCode128Props = BarcodeCode128Inputs & BarcodeCode128Events<wjcBarcodeCommon.Code128>;
export declare type BarcodeCode128Ref = wjcReactBase.WjRef<wjcBarcodeCommon.Code128>;
/**
 * React component for the {@link wijmo.barcode.common.Code128} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.Code128} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeCode128: React.ForwardRefExoticComponent<BarcodeCode128Props>;
export declare type BarcodeGs1_128Inputs = BarcodeBaseInputs & {
    autoWidth?: boolean;
    autoWidthZoom?: number;
    labelPosition?: LabelPosition | string;
    showLabel?: boolean;
};
export declare type BarcodeGs1_128Events<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeGs1_128Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeGs1_128Props = BarcodeGs1_128Inputs & BarcodeGs1_128Events<wjcBarcodeCommon.Gs1_128>;
export declare type BarcodeGs1_128Ref = wjcReactBase.WjRef<wjcBarcodeCommon.Gs1_128>;
/**
 * React component for the {@link wijmo.barcode.common.Gs1_128} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.Gs1_128} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeGs1_128: React.ForwardRefExoticComponent<BarcodeGs1_128Props>;
export declare type BarcodeUpcBaseInputs = BarcodeBaseInputs & {
    addOn?: string | number;
    addOnHeight?: string | number;
    addOnLabelPosition?: LabelPosition | string;
    labelPosition?: LabelPosition | string;
    quietZone?: IQuietZoneWithAddOn;
    showLabel?: boolean;
};
export declare type BarcodeUpcBaseEvents<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeUpcBaseMeta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeUpcAInputs = BarcodeUpcBaseInputs & {};
export declare type BarcodeUpcAEvents<T> = BarcodeUpcBaseEvents<T> & {};
export declare const BarcodeUpcAMeta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeUpcAProps = BarcodeUpcAInputs & BarcodeUpcAEvents<wjcBarcodeCommon.UpcA>;
export declare type BarcodeUpcARef = wjcReactBase.WjRef<wjcBarcodeCommon.UpcA>;
/**
 * React component for the {@link wijmo.barcode.common.UpcA} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.UpcA} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeUpcA: React.ForwardRefExoticComponent<BarcodeUpcAProps>;
export declare type BarcodeUpcE0Inputs = BarcodeUpcBaseInputs & {};
export declare type BarcodeUpcE0Events<T> = BarcodeUpcBaseEvents<T> & {};
export declare const BarcodeUpcE0Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeUpcE0Props = BarcodeUpcE0Inputs & BarcodeUpcE0Events<wjcBarcodeCommon.UpcE0>;
export declare type BarcodeUpcE0Ref = wjcReactBase.WjRef<wjcBarcodeCommon.UpcE0>;
/**
 * React component for the {@link wijmo.barcode.common.UpcE0} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.UpcE0} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeUpcE0: React.ForwardRefExoticComponent<BarcodeUpcE0Props>;
export declare type BarcodeUpcE1Inputs = BarcodeUpcBaseInputs & {};
export declare type BarcodeUpcE1Events<T> = BarcodeUpcBaseEvents<T> & {};
export declare const BarcodeUpcE1Meta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeUpcE1Props = BarcodeUpcE1Inputs & BarcodeUpcE1Events<wjcBarcodeCommon.UpcE1>;
export declare type BarcodeUpcE1Ref = wjcReactBase.WjRef<wjcBarcodeCommon.UpcE1>;
/**
 * React component for the {@link wijmo.barcode.common.UpcE1} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.UpcE1} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeUpcE1: React.ForwardRefExoticComponent<BarcodeUpcE1Props>;
export declare type BarcodeQrCodeInputs = BarcodeBaseInputs & {
    charCode?: number[];
    charset?: wjcBarcodeCommon.QrCodeCharset | string;
    connection?: boolean;
    connectionIndex?: number;
    errorCorrectionLevel?: wjcBarcodeCommon.QrCodeCorrectionLevel | string;
    mask?: number;
    model?: wjcBarcodeCommon.QrCodeModel | string;
    version?: number;
};
export declare type BarcodeQrCodeEvents<T> = BarcodeBaseEvents<T> & {};
export declare const BarcodeQrCodeMeta: {
    inputs: string[];
    events: string[];
};
export declare type BarcodeQrCodeProps = BarcodeQrCodeInputs & BarcodeQrCodeEvents<wjcBarcodeCommon.QrCode>;
export declare type BarcodeQrCodeRef = wjcReactBase.WjRef<wjcBarcodeCommon.QrCode>;
/**
 * React component for the {@link wijmo.barcode.common.QrCode} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.barcode.common.QrCode} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const BarcodeQrCode: React.ForwardRefExoticComponent<BarcodeQrCodeProps>;
