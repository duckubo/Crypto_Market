/*!
    *
    * Wijmo Library 5.20242.21
    * https://developer.mescius.com/wijmo
    *
    * Copyright(c) MESCIUS inc. All rights reserved.
    *
    * Licensed under the End-User License Agreement For MESCIUS Wijmo Software.
    * us.sales@mescius.com
    * https://developer.mescius.com/wijmo/licensing
    *
    */
/**
 * {@module wijmo.react.olap}
 * Contains React components for the <b>wijmo.olap</b> module.
 */
/**
 *
 */
export declare var ___keepComment: any;
import { ControlBaseEvents, ControlBaseInputs, Overwrite, WjRef } from '@mescius/wijmo.react.base';
import { Position, Stacking } from '@mescius/wijmo.chart';
import * as React from 'react';
import * as wjcCore from '@mescius/wijmo';
import * as wjGrid from '@mescius/wijmo.react.grid';
import * as wjcOlap from '@mescius/wijmo.olap';
export declare type PivotGridInputs = Overwrite<wjGrid.FlexGridInputs, {
    itemsSource?: any[] | wjcCore.ICollectionView | wjcOlap.PivotEngine;
    centerHeadersVertically?: boolean;
    collapsibleSubtotals?: boolean;
    customContextMenu?: boolean;
    outlineMode?: boolean;
    showColumnFieldHeaders?: boolean;
    showDetailOnDoubleClick?: boolean;
    showRowFieldHeaders?: boolean;
    showRowFieldSort?: boolean;
    showValueFieldHeaders?: boolean;
}>;
export declare type PivotGridEvents<T> = wjGrid.FlexGridEvents<T> & {};
export declare const PivotGridMeta: {
    inputs: string[];
    events: string[];
};
export declare type PivotGridProps = PivotGridInputs & PivotGridEvents<wjcOlap.PivotGrid>;
export declare type PivotGridRef = WjRef<wjcOlap.PivotGrid>;
/**
 * React component for the {@link wijmo.olap.PivotGrid} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.olap.PivotGrid} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const PivotGrid: React.ForwardRefExoticComponent<PivotGridProps>;
export declare type PivotChartInputs = ControlBaseInputs & {
    chartType?: wjcOlap.PivotChartType | string;
    footer?: string;
    footerStyle?: any;
    header?: string;
    headerStyle?: any;
    itemsSource?: any;
    legendPosition?: Position | string;
    maxPoints?: number;
    maxSeries?: number;
    showHierarchicalAxes?: boolean;
    showLegend?: wjcOlap.LegendVisibility | string;
    showTitle?: boolean;
    showTotals?: boolean;
    stacking?: Stacking | string;
};
export declare type PivotChartEvents<T> = ControlBaseEvents<T> & {};
export declare const PivotChartMeta: {
    inputs: string[];
    events: string[];
};
export declare type PivotChartProps = PivotChartInputs & PivotChartEvents<wjcOlap.PivotChart>;
export declare type PivotChartRef = WjRef<wjcOlap.PivotChart>;
/**
 * React component for the {@link wijmo.olap.PivotChart} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.olap.PivotChart} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const PivotChart: React.ForwardRefExoticComponent<PivotChartProps>;
export declare type PivotPanelInputs = ControlBaseInputs & {
    autoGenerateFields?: boolean;
    deferredUpdate?: boolean;
    engine?: wjcOlap.PivotEngine;
    itemsSource?: any;
    restrictDragging?: boolean | null;
    showFieldIcons?: boolean;
    viewDefinition?: string;
};
export declare type PivotPanelEvents<T> = ControlBaseEvents<T> & {
    deferredUpdateChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    itemsSourceChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    updatedView?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    updatingView?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
    viewDefinitionChanged?: wjcCore.IEventHandler<T, wjcCore.EventArgs>;
};
export declare const PivotPanelMeta: {
    inputs: string[];
    events: string[];
};
export declare type PivotPanelProps = PivotPanelInputs & PivotPanelEvents<wjcOlap.PivotPanel>;
export declare type PivotPanelRef = WjRef<wjcOlap.PivotPanel>;
/**
 * React component for the {@link wijmo.olap.PivotPanel} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.olap.PivotPanel} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const PivotPanel: React.ForwardRefExoticComponent<PivotPanelProps>;
export declare type SlicerInputs = ControlBaseInputs & {
    field?: wjcOlap.PivotField;
    header?: string | null;
    multiSelect?: boolean;
    showCheckboxes?: boolean;
    showHeader?: boolean;
};
export declare type SlicerEvents<T> = ControlBaseEvents<T> & {};
export declare const SlicerMeta: {
    inputs: string[];
    events: string[];
};
export declare type SlicerProps = SlicerInputs & SlicerEvents<wjcOlap.Slicer>;
export declare type SlicerRef = WjRef<wjcOlap.Slicer>;
/**
 * React component for the {@link wijmo.olap.Slicer} control.
 *
 * The component supports all properties and events of the pure JavaScript {@link wijmo.olap.Slicer} control it represents.
 *
 * The component includes an <b>initialized</b> event that is raised when the control is initialized after it is added to the page.
 * You can use this event to perform further initialization in addition to setting properties in JSX.
 * The signature of the handler function is the same as any other Wijmo event handlers.
 */
export declare const Slicer: React.ForwardRefExoticComponent<SlicerProps>;
